{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Taxi",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "car",
      "description": "Cars"
    },
    {
      "name": "driver",
      "description": "Driver"
    },
    {
      "name": "customer",
      "description": "Customer"
    },
    {
      "name": "booking",
      "description": "Booking"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/car": {
      "get": {
        "tags": [
          "car"
        ],
        "summary": "Finds Cars",
        "operationId": "findCars",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "post": {
        "tags": [
          "car"
        ],
        "summary": "Add a new car",
        "description": "",
        "operationId": "addCar",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "car"
        ],
        "summary": "Update an existing car",
        "description": "",
        "operationId": "updateCar",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Car not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/car/{carId}": {
      "get": {
        "tags": [
          "car"
        ],
        "summary": "Find car by ID",
        "description": "Returns a single car",
        "operationId": "getCarById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "ID of car to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "tags": [
          "car"
        ],
        "summary": "Updates a car in the store with form data",
        "description": "",
        "operationId": "updateCarWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "ID of car that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "licenseplate",
            "in": "formData",
            "description": "Updated license plate of the car",
            "required": false,
            "type": "string"
          },
          {
            "name": "brand",
            "in": "formData",
            "description": "Updated brand of the car",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "car"
        ],
        "summary": "Deletes a car",
        "description": "",
        "operationId": "deleteCar",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "carId",
            "in": "path",
            "description": "Car id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "404": {
            "description": "Car not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Car": {
      "type": "object",
      "required": [
        "licenseplate",
        "brand"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "licenseplate": {
          "type": "string",
          "example": "AB-4567"
        },
        "brand": {
          "type": "string",
          "example": "BMW"
        }
      },
      "xml": {
        "name": "Car"
      }
    },
    "Driver": {
      "type": "object",
      "required": [
        "driverID",
        "driverName",
        "driverLicense",
        "citizenID"
      ],
      "properties": {
        "driverID": {
          "type": "integer",
          "format": "int64"
        },
        "driverName": {
          "type": "string",
          "example": "ABC DEF"
        },
        "driverLicense": {
          "type": "string",
          "example": "ABC-DEF"
        },
        "citizenID": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "other"
          ]
        },
        "age": {
          "type": "integer",
          "format": "int64"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Driver"
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "id",
        "citizenID"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "ABC DEF"
        },
        "citizenID": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "other"
          ]
        },
        "age": {
          "type": "integer",
          "format": "int64"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Driver"
      }
    },
    "Booking": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "departureTime": {
          "type": "date-time"
        },
        "arrivalTime": {
          "type": "date-time"
        },
        "departurePlace": {
          "type": "string"
        },
        "arrivalPlace": {
          "type": "string"
        },
        "price": {
          "type": "double"
        },
        "distance": {
          "type": "double"
        },
        "location": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Booking"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}